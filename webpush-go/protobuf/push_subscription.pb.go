// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/push_subscription.proto

package webpush101

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PushSubscription struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	P256Dh               string   `protobuf:"bytes,2,opt,name=p256dh,proto3" json:"p256dh,omitempty"`
	Auth                 string   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushSubscription) Reset()         { *m = PushSubscription{} }
func (m *PushSubscription) String() string { return proto.CompactTextString(m) }
func (*PushSubscription) ProtoMessage()    {}
func (*PushSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_push_subscription_7517c44099154225, []int{0}
}
func (m *PushSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushSubscription.Unmarshal(m, b)
}
func (m *PushSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushSubscription.Marshal(b, m, deterministic)
}
func (dst *PushSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSubscription.Merge(dst, src)
}
func (m *PushSubscription) XXX_Size() int {
	return xxx_messageInfo_PushSubscription.Size(m)
}
func (m *PushSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_PushSubscription proto.InternalMessageInfo

func (m *PushSubscription) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *PushSubscription) GetP256Dh() string {
	if m != nil {
		return m.P256Dh
	}
	return ""
}

func (m *PushSubscription) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type UserSubscription struct {
	User                 *User               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Subscription         []*PushSubscription `protobuf:"bytes,2,rep,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserSubscription) Reset()         { *m = UserSubscription{} }
func (m *UserSubscription) String() string { return proto.CompactTextString(m) }
func (*UserSubscription) ProtoMessage()    {}
func (*UserSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_push_subscription_7517c44099154225, []int{1}
}
func (m *UserSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSubscription.Unmarshal(m, b)
}
func (m *UserSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSubscription.Marshal(b, m, deterministic)
}
func (dst *UserSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSubscription.Merge(dst, src)
}
func (m *UserSubscription) XXX_Size() int {
	return xxx_messageInfo_UserSubscription.Size(m)
}
func (m *UserSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_UserSubscription proto.InternalMessageInfo

func (m *UserSubscription) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserSubscription) GetSubscription() []*PushSubscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func init() {
	proto.RegisterType((*PushSubscription)(nil), "PushSubscription")
	proto.RegisterType((*UserSubscription)(nil), "UserSubscription")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushSubscriptionServiceClient is the client API for PushSubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushSubscriptionServiceClient interface {
	Subscribe(ctx context.Context, in *UserSubscription, opts ...grpc.CallOption) (*empty.Empty, error)
	Unsubscribe(ctx context.Context, in *PushSubscription, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (PushSubscriptionService_GetClient, error)
}

type pushSubscriptionServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushSubscriptionServiceClient(cc *grpc.ClientConn) PushSubscriptionServiceClient {
	return &pushSubscriptionServiceClient{cc}
}

func (c *pushSubscriptionServiceClient) Subscribe(ctx context.Context, in *UserSubscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/PushSubscriptionService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSubscriptionServiceClient) Unsubscribe(ctx context.Context, in *PushSubscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/PushSubscriptionService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSubscriptionServiceClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (PushSubscriptionService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushSubscriptionService_serviceDesc.Streams[0], "/PushSubscriptionService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushSubscriptionServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushSubscriptionService_GetClient interface {
	Recv() (*PushSubscription, error)
	grpc.ClientStream
}

type pushSubscriptionServiceGetClient struct {
	grpc.ClientStream
}

func (x *pushSubscriptionServiceGetClient) Recv() (*PushSubscription, error) {
	m := new(PushSubscription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushSubscriptionServiceServer is the server API for PushSubscriptionService service.
type PushSubscriptionServiceServer interface {
	Subscribe(context.Context, *UserSubscription) (*empty.Empty, error)
	Unsubscribe(context.Context, *PushSubscription) (*empty.Empty, error)
	Get(*User, PushSubscriptionService_GetServer) error
}

func RegisterPushSubscriptionServiceServer(s *grpc.Server, srv PushSubscriptionServiceServer) {
	s.RegisterService(&_PushSubscriptionService_serviceDesc, srv)
}

func _PushSubscriptionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushSubscriptionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PushSubscriptionService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushSubscriptionServiceServer).Subscribe(ctx, req.(*UserSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushSubscriptionService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushSubscriptionServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PushSubscriptionService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushSubscriptionServiceServer).Unsubscribe(ctx, req.(*PushSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushSubscriptionService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushSubscriptionServiceServer).Get(m, &pushSubscriptionServiceGetServer{stream})
}

type PushSubscriptionService_GetServer interface {
	Send(*PushSubscription) error
	grpc.ServerStream
}

type pushSubscriptionServiceGetServer struct {
	grpc.ServerStream
}

func (x *pushSubscriptionServiceGetServer) Send(m *PushSubscription) error {
	return x.ServerStream.SendMsg(m)
}

var _PushSubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PushSubscriptionService",
	HandlerType: (*PushSubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _PushSubscriptionService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PushSubscriptionService_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _PushSubscriptionService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/push_subscription.proto",
}

func init() {
	proto.RegisterFile("protobuf/push_subscription.proto", fileDescriptor_push_subscription_7517c44099154225)
}

var fileDescriptor_push_subscription_7517c44099154225 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x4d, 0x29, 0x12, 0x99, 0x72, 0x80, 0x31, 0xc1, 0x5a, 0x2f, 0x95, 0x13, 0xa7, 0x05, 0x6a,
	0x20, 0x9e, 0x4d, 0x8c, 0x57, 0x53, 0xc2, 0x85, 0x8b, 0xb1, 0x74, 0xa4, 0x4d, 0xb4, 0xbb, 0xd9,
	0x0f, 0x8d, 0x7f, 0xca, 0xdf, 0x68, 0xba, 0xad, 0x4d, 0xa9, 0xf1, 0xb6, 0xf3, 0xe6, 0xbd, 0x37,
	0x33, 0x6f, 0x21, 0x14, 0x92, 0x6b, 0x9e, 0x98, 0xd7, 0x85, 0x30, 0x2a, 0x7b, 0x56, 0x26, 0x51,
	0x07, 0x99, 0x0b, 0x9d, 0xf3, 0x82, 0xd9, 0x56, 0x70, 0x7d, 0xe4, 0xfc, 0xf8, 0x46, 0x8b, 0x86,
	0x48, 0xef, 0x42, 0x7f, 0xd5, 0xcd, 0x8b, 0x06, 0x35, 0x8a, 0x64, 0x05, 0xce, 0xf6, 0x30, 0x7e,
	0x32, 0x2a, 0xdb, 0xb6, 0xbc, 0x30, 0x80, 0x73, 0x2a, 0x52, 0xc1, 0xf3, 0x42, 0xfb, 0x4e, 0xe8,
	0xcc, 0x87, 0x71, 0x53, 0xe3, 0x14, 0x06, 0x22, 0x5a, 0x6f, 0xd2, 0xcc, 0xef, 0xd9, 0x4e, 0x5d,
	0x21, 0x42, 0xff, 0xc5, 0xe8, 0xcc, 0x77, 0x2d, 0x6a, 0xdf, 0xb3, 0x14, 0xc6, 0x3b, 0x45, 0xf2,
	0xc4, 0xfb, 0x0a, 0xfa, 0xe5, 0x74, 0xeb, 0xeb, 0x45, 0x67, 0xac, 0x24, 0xc4, 0x16, 0xc2, 0x35,
	0x8c, 0xda, 0x27, 0xf9, 0xbd, 0xd0, 0x9d, 0x7b, 0xd1, 0x84, 0x75, 0xf7, 0x8b, 0x4f, 0x68, 0xd1,
	0xb7, 0x03, 0x97, 0x5d, 0xca, 0x96, 0xe4, 0x47, 0x7e, 0x20, 0xdc, 0xc0, 0xb0, 0x86, 0x13, 0xc2,
	0x09, 0xeb, 0x6e, 0x13, 0x4c, 0x59, 0x15, 0x18, 0xfb, 0x8d, 0x86, 0x3d, 0x94, 0x81, 0xe1, 0x1d,
	0x78, 0xbb, 0x42, 0xb5, 0x94, 0xdd, 0x01, 0xff, 0x2a, 0x6f, 0xc0, 0x7d, 0x24, 0x8d, 0xd5, 0x61,
	0xc1, 0x5f, 0xe1, 0xd2, 0xb9, 0x1f, 0xed, 0xe1, 0x93, 0x92, 0xf2, 0x0b, 0x57, 0xcb, 0x55, 0x32,
	0xb0, 0x06, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xc0, 0x73, 0x1f, 0xdd, 0x01, 0x00,
	0x00,
}
